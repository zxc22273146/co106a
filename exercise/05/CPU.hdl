// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    
    // A register
    Not(in=instruction[15], out=isA);         // isA = not I15
    Not(in=isA, out=isC);                     // isC = I15
    And(a=isC, b=instruction[5], out=AluToA); // AluToA = isC & d1
    Or(a=isA, b=AluToA, out=Aload);
    
    Mux16(a=instruction, b=ALUout, sel=isC, out=Ain);
    ARegister(in=Ain, load=Aload, out=Aout);
    
    // D register
    And(a=isC, b=instruction[4], out=Dload);  // Dload = isC & d2
    DRegister(in=ALUout, load=Dload, out=Dout);
    
    // ALU
    Mux16(a=Aout, b=inM, sel=instruction[12], out=AorM); // cAorM = I[12]
    
    ALU(x=Dout, y=AorM, zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], 
        out=ALUout, zr=zr, ng=ng);
    
    PC(in=Aout, load=PCload, inc=true, reset=reset, out[0..14]=pc);
    
    // JUMP condition
    Or(a=ng, b=zr, out=ngzr);   // ngzr = (ng | zr)
    Not(in=ngzr, out=g);        // g = out > 0 = !(ng | zr);  ng = out < 0;  zr = out = 0
    And(a=ng, b=instruction[2], out=passLT);          // ngLT = (ng & LT)
    And(a=zr, b=instruction[1], out=passEQ);          // zrEQ = (zr & EQ)
    And(a=g,  b=instruction[0], out=passGT);          // gGT = (g & GT)
    Or(a=passLT, b=passEQ, out=passLE);
    Or(a=passLE, b=passGT, out=pass);

    And(a=isC, b=pass, out=PCload); // PCload = isC & J

    // output
    And16(a=Aout, b=Aout, out[0..14]=addressM);
    And(a=isC, b=instruction[3], out=writeM); // writeM = isC & d3
    And16(a=ALUout, b=ALUout, out=outM);
}