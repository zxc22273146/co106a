// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
       // if zx {x = 0}
   Mux16(a=x, b=false, sel=zx, out=zx1);

      // if nx {x = !x}
   Not16(in=zx1, out=zx2);
   Mux16(a=zx1, b=zx2, sel=nx, out=nx1);

   // if (zy) {y = 0}
   Mux16(a=y, b=false, sel=zy, out=zy1);

      // if (ny) {y = !y}
   Not16(in=zy1, out=zy2);
   Mux16(a=zy1, b=zy2, sel=ny, out=ny1);

   // if (f) {out = x + y} else {out = x & y}
   Add16(a=nx1, b=ny1, out=addxy);
   And16(a=nx1, b=ny1, out=andxy);
   Mux16(a=andxy, b=addxy, sel=f, out=fxy);

   // if (no) {out = !out}

   Not16(in=fxy, out=fxy1);
   Mux16(a=fxy, b=fxy1, sel=no, out[0..7]=o1, out[8..15]=o2, out[15]=o3, out=out);

    // if (out == 0) {zr = 1} else {zr = 0}
   Or8Way(in=o1, out=Oo1);
   Or8Way(in=o2, out=Oo2);
   Or(a=Oo1, b=Oo2, out=Oo3);
   Not(in=Oo3, out=zr);

   // if (out < 0) {ng = 1} else {ng = 0}
   // if (out[15] = 1) {ng = 1} else {ng = 0}
   And(a=o3,b=o3,out=ng1);
   Mux(a=false,b=true,sel=ng1,out=ng);
}
